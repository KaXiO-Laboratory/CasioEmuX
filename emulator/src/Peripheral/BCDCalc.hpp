#pragma once
#include "../Config.hpp"

#include "Peripheral.hpp"
#include "../Chipset/MMURegion.hpp"

namespace casioemu
{
	class BCDCalc : public Peripheral
	{
		MMURegion region_BCDCMD, region_BCDCON, region_BCDMCN, region_BCDMCR, region_BCDFLG, region_BCDLLZ, region_BCDMLZ,
			region_BCDREGA, region_BCDREGB, region_BCDREGC, region_BCDREGD;

		uint8_t data_BCDCMD, data_BCDCON, data_BCDMCN, data_BCDLLZ, data_BCDMLZ;
		uint8_t BCDREG[4][12];

		uint8_t BCDMCN;
		bool C_flag, Z_flag, macro_running;

		uint8_t BCDCMD_req, BCDMCR_req;
		bool BCDCMD_pend, BCDMCR_pend;

		uint16_t* current_pgm;
		uint8_t pgm_counter;

		uint16_t mul_pgm[32] = { 0x21B7, 0x21B6, 0x211A, 0x211A, 0x21A1, 0x86D0, 0x1F91, 0x2F91, 0x2F91, 0x2F91, 0x2F91, 0x2F91, 0x2F91, 0x2F91, 0x2F91, 0x2F91,
			0x1F91, 0x1F91, 0x1F91, 0x1F91, 0x1F91, 0x1F91, 0x1F1D, 0x161D, 0x212D, 0x1F19, 0x1619, 0x1719, 0x1819, 0x1919, 0x1A19, 0xE500 };
		uint16_t div_pgm[32] = { 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0x7029, 0x7329, 0x4929, 0x681D, 0x671D, 0x061D,
			0x621D, 0x611D, 0x001D, 0x651D, 0x641D, 0x031D, 0x21B7, 0x21B6, 0x2116, 0x2116, 0x21B1, 0x22A0, 0x2181, 0x0A80, 0xFC00, 0xFC00 };
		uint16_t divsn_pgm[32] = { 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0xBC00, 0x7029, 0x7329, 0x4929, 0x681D, 0x671D, 0x061D,
			0x621D, 0x611D, 0x001D, 0x651D, 0x641D, 0x031D, 0x21B7, 0x21B6, 0x2116, 0x2116, 0x21CD, 0x0A8C, 0x21C1, 0x0A80, 0xFC00, 0xFC00 };
		uint16_t sft_pgm[32] = { 0xC180, 0xC284, 0xC488, 0xC88C, 0xC181, 0xC285, 0xC489, 0xC88D, 0xC182, 0xC286, 0xC48A, 0xC88E, 0xC183, 0xC287, 0xC48B, 0xC88F,
			0xC190, 0xC294, 0xC498, 0xC89C, 0xC191, 0xC295, 0xC499, 0xC89D, 0xC192, 0xC296, 0xC49A, 0xC89E, 0xC193, 0xC297, 0xC49B, 0xC89F };

		uint16_t* pgm_ptr[16] = { nullptr, nullptr, mul_pgm, mul_pgm, div_pgm, div_pgm, divsn_pgm, divsn_pgm,
			sft_pgm, sft_pgm, sft_pgm, sft_pgm, sft_pgm, sft_pgm, sft_pgm, sft_pgm };
		uint8_t pgm_entry[16] = { 0x00, 0x00, 0x00, 0x05, 0x16, 0x1C, 0x16, 0x1C, 0x00, 0x04, 0x08, 0x0C, 0x10, 0x14, 0x18, 0x1C };

		static uint8_t ReadReg(MMURegion* region, size_t offset) {
			offset -= region->base;
			return ((uint8_t*)region->userdata)[offset];
		}

		static void WriteReg(MMURegion* region, size_t offset, uint8_t data) {
			offset -= region->base;
			((uint8_t*)region->userdata)[offset] = data;
		}

	public:
		using Peripheral::Peripheral;

		void Initialise();
		void Reset();
		void Tick();

		void RunCommand(uint8_t);
		void StartMacro(uint8_t);
		void ShiftLeft(uint8_t, uint8_t, bool);
		void ShiftRight(uint8_t, uint8_t, bool);
	};
}

